// Code generated by mockery v2.32.4. DO NOT EDIT.

package tmdb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tmdb "github.com/jj-style/go-tmdb"
)

// MockTMDb is an autogenerated mock type for the TMDb type
type MockTMDb struct {
	mock.Mock
}

type MockTMDb_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTMDb) EXPECT() *MockTMDb_Expecter {
	return &MockTMDb_Expecter{mock: &_m.Mock}
}

// GetActorMovieCredits provides a mock function with given fields: ctx, id
func (_m *MockTMDb) GetActorMovieCredits(ctx context.Context, id int) (*tmdb.PersonMovieCredits, error) {
	ret := _m.Called(ctx, id)

	var r0 *tmdb.PersonMovieCredits
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*tmdb.PersonMovieCredits, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *tmdb.PersonMovieCredits); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmdb.PersonMovieCredits)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTMDb_GetActorMovieCredits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActorMovieCredits'
type MockTMDb_GetActorMovieCredits_Call struct {
	*mock.Call
}

// GetActorMovieCredits is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockTMDb_Expecter) GetActorMovieCredits(ctx interface{}, id interface{}) *MockTMDb_GetActorMovieCredits_Call {
	return &MockTMDb_GetActorMovieCredits_Call{Call: _e.mock.On("GetActorMovieCredits", ctx, id)}
}

func (_c *MockTMDb_GetActorMovieCredits_Call) Run(run func(ctx context.Context, id int)) *MockTMDb_GetActorMovieCredits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockTMDb_GetActorMovieCredits_Call) Return(_a0 *tmdb.PersonMovieCredits, _a1 error) *MockTMDb_GetActorMovieCredits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTMDb_GetActorMovieCredits_Call) RunAndReturn(run func(context.Context, int) (*tmdb.PersonMovieCredits, error)) *MockTMDb_GetActorMovieCredits_Call {
	_c.Call.Return(run)
	return _c
}

// GetActorsByName provides a mock function with given fields: ctx, c, r, names
func (_m *MockTMDb) GetActorsByName(ctx context.Context, c chan<- *tmdb.Person, r func() error, names ...string) error {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, c, r)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *tmdb.Person, func() error, ...string) error); ok {
		r0 = rf(ctx, c, r, names...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTMDb_GetActorsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActorsByName'
type MockTMDb_GetActorsByName_Call struct {
	*mock.Call
}

// GetActorsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - c chan<- *tmdb.Person
//   - r func() error
//   - names ...string
func (_e *MockTMDb_Expecter) GetActorsByName(ctx interface{}, c interface{}, r interface{}, names ...interface{}) *MockTMDb_GetActorsByName_Call {
	return &MockTMDb_GetActorsByName_Call{Call: _e.mock.On("GetActorsByName",
		append([]interface{}{ctx, c, r}, names...)...)}
}

func (_c *MockTMDb_GetActorsByName_Call) Run(run func(ctx context.Context, c chan<- *tmdb.Person, r func() error, names ...string)) *MockTMDb_GetActorsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(chan<- *tmdb.Person), args[2].(func() error), variadicArgs...)
	})
	return _c
}

func (_c *MockTMDb_GetActorsByName_Call) Return(_a0 error) *MockTMDb_GetActorsByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTMDb_GetActorsByName_Call) RunAndReturn(run func(context.Context, chan<- *tmdb.Person, func() error, ...string) error) *MockTMDb_GetActorsByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetActorsFrom provides a mock function with given fields: ctx, c, r, id
func (_m *MockTMDb) GetActorsFrom(ctx context.Context, c chan<- *tmdb.Person, r func() error, id int) error {
	ret := _m.Called(ctx, c, r, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *tmdb.Person, func() error, int) error); ok {
		r0 = rf(ctx, c, r, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTMDb_GetActorsFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActorsFrom'
type MockTMDb_GetActorsFrom_Call struct {
	*mock.Call
}

// GetActorsFrom is a helper method to define mock.On call
//   - ctx context.Context
//   - c chan<- *tmdb.Person
//   - r func() error
//   - id int
func (_e *MockTMDb_Expecter) GetActorsFrom(ctx interface{}, c interface{}, r interface{}, id interface{}) *MockTMDb_GetActorsFrom_Call {
	return &MockTMDb_GetActorsFrom_Call{Call: _e.mock.On("GetActorsFrom", ctx, c, r, id)}
}

func (_c *MockTMDb_GetActorsFrom_Call) Run(run func(ctx context.Context, c chan<- *tmdb.Person, r func() error, id int)) *MockTMDb_GetActorsFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- *tmdb.Person), args[2].(func() error), args[3].(int))
	})
	return _c
}

func (_c *MockTMDb_GetActorsFrom_Call) Return(_a0 error) *MockTMDb_GetActorsFrom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTMDb_GetActorsFrom_Call) RunAndReturn(run func(context.Context, chan<- *tmdb.Person, func() error, int) error) *MockTMDb_GetActorsFrom_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActorMovieCredits provides a mock function with given fields: ctx, c, r, ids
func (_m *MockTMDb) GetAllActorMovieCredits(ctx context.Context, c chan<- *tmdb.PersonMovieCredits, r func() error, ids ...int) error {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, c, r)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *tmdb.PersonMovieCredits, func() error, ...int) error); ok {
		r0 = rf(ctx, c, r, ids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTMDb_GetAllActorMovieCredits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActorMovieCredits'
type MockTMDb_GetAllActorMovieCredits_Call struct {
	*mock.Call
}

// GetAllActorMovieCredits is a helper method to define mock.On call
//   - ctx context.Context
//   - c chan<- *tmdb.PersonMovieCredits
//   - r func() error
//   - ids ...int
func (_e *MockTMDb_Expecter) GetAllActorMovieCredits(ctx interface{}, c interface{}, r interface{}, ids ...interface{}) *MockTMDb_GetAllActorMovieCredits_Call {
	return &MockTMDb_GetAllActorMovieCredits_Call{Call: _e.mock.On("GetAllActorMovieCredits",
		append([]interface{}{ctx, c, r}, ids...)...)}
}

func (_c *MockTMDb_GetAllActorMovieCredits_Call) Run(run func(ctx context.Context, c chan<- *tmdb.PersonMovieCredits, r func() error, ids ...int)) *MockTMDb_GetAllActorMovieCredits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), args[1].(chan<- *tmdb.PersonMovieCredits), args[2].(func() error), variadicArgs...)
	})
	return _c
}

func (_c *MockTMDb_GetAllActorMovieCredits_Call) Return(_a0 error) *MockTMDb_GetAllActorMovieCredits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTMDb_GetAllActorMovieCredits_Call) RunAndReturn(run func(context.Context, chan<- *tmdb.PersonMovieCredits, func() error, ...int) error) *MockTMDb_GetAllActorMovieCredits_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActors provides a mock function with given fields: ctx, c, r
func (_m *MockTMDb) GetAllActors(ctx context.Context, c chan<- *tmdb.Person, r func() error) error {
	ret := _m.Called(ctx, c, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *tmdb.Person, func() error) error); ok {
		r0 = rf(ctx, c, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTMDb_GetAllActors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActors'
type MockTMDb_GetAllActors_Call struct {
	*mock.Call
}

// GetAllActors is a helper method to define mock.On call
//   - ctx context.Context
//   - c chan<- *tmdb.Person
//   - r func() error
func (_e *MockTMDb_Expecter) GetAllActors(ctx interface{}, c interface{}, r interface{}) *MockTMDb_GetAllActors_Call {
	return &MockTMDb_GetAllActors_Call{Call: _e.mock.On("GetAllActors", ctx, c, r)}
}

func (_c *MockTMDb_GetAllActors_Call) Run(run func(ctx context.Context, c chan<- *tmdb.Person, r func() error)) *MockTMDb_GetAllActors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- *tmdb.Person), args[2].(func() error))
	})
	return _c
}

func (_c *MockTMDb_GetAllActors_Call) Return(_a0 error) *MockTMDb_GetAllActors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTMDb_GetAllActors_Call) RunAndReturn(run func(context.Context, chan<- *tmdb.Person, func() error) error) *MockTMDb_GetAllActors_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTMDb creates a new instance of MockTMDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTMDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTMDb {
	mock := &MockTMDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
