// Code generated by mockery v2.32.4. DO NOT EDIT.

package db

import (
	dbtype "github.com/neo4j/neo4j-go-driver/v5/neo4j/dbtype"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AllActors provides a mock function with given fields:
func (_m *MockRepository) AllActors() ([]Actor, error) {
	ret := _m.Called()

	var r0 []Actor
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Actor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Actor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Actor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_AllActors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllActors'
type MockRepository_AllActors_Call struct {
	*mock.Call
}

// AllActors is a helper method to define mock.On call
func (_e *MockRepository_Expecter) AllActors() *MockRepository_AllActors_Call {
	return &MockRepository_AllActors_Call{Call: _e.mock.On("AllActors")}
}

func (_c *MockRepository_AllActors_Call) Run(run func()) *MockRepository_AllActors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_AllActors_Call) Return(_a0 []Actor, _a1 error) *MockRepository_AllActors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_AllActors_Call) RunAndReturn(run func() ([]Actor, error)) *MockRepository_AllActors_Call {
	_c.Call.Return(run)
	return _c
}

// AllCredits provides a mock function with given fields:
func (_m *MockRepository) AllCredits() ([]Credit, error) {
	ret := _m.Called()

	var r0 []Credit
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Credit, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Credit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Credit)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_AllCredits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllCredits'
type MockRepository_AllCredits_Call struct {
	*mock.Call
}

// AllCredits is a helper method to define mock.On call
func (_e *MockRepository_Expecter) AllCredits() *MockRepository_AllCredits_Call {
	return &MockRepository_AllCredits_Call{Call: _e.mock.On("AllCredits")}
}

func (_c *MockRepository_AllCredits_Call) Run(run func()) *MockRepository_AllCredits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_AllCredits_Call) Return(_a0 []Credit, _a1 error) *MockRepository_AllCredits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_AllCredits_Call) RunAndReturn(run func() ([]Credit, error)) *MockRepository_AllCredits_Call {
	_c.Call.Return(run)
	return _c
}

// AllMovies provides a mock function with given fields:
func (_m *MockRepository) AllMovies() ([]Movie, error) {
	ret := _m.Called()

	var r0 []Movie
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Movie, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Movie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Movie)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_AllMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllMovies'
type MockRepository_AllMovies_Call struct {
	*mock.Call
}

// AllMovies is a helper method to define mock.On call
func (_e *MockRepository_Expecter) AllMovies() *MockRepository_AllMovies_Call {
	return &MockRepository_AllMovies_Call{Call: _e.mock.On("AllMovies")}
}

func (_c *MockRepository_AllMovies_Call) Run(run func()) *MockRepository_AllMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_AllMovies_Call) Return(_a0 []Movie, _a1 error) *MockRepository_AllMovies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_AllMovies_Call) RunAndReturn(run func() ([]Movie, error)) *MockRepository_AllMovies_Call {
	_c.Call.Return(run)
	return _c
}

// CreateActor provides a mock function with given fields: actor
func (_m *MockRepository) CreateActor(actor Actor) (*Actor, error) {
	ret := _m.Called(actor)

	var r0 *Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(Actor) (*Actor, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(Actor) *Actor); ok {
		r0 = rf(actor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(Actor) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateActor'
type MockRepository_CreateActor_Call struct {
	*mock.Call
}

// CreateActor is a helper method to define mock.On call
//   - actor Actor
func (_e *MockRepository_Expecter) CreateActor(actor interface{}) *MockRepository_CreateActor_Call {
	return &MockRepository_CreateActor_Call{Call: _e.mock.On("CreateActor", actor)}
}

func (_c *MockRepository_CreateActor_Call) Run(run func(actor Actor)) *MockRepository_CreateActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Actor))
	})
	return _c
}

func (_c *MockRepository_CreateActor_Call) Return(_a0 *Actor, _a1 error) *MockRepository_CreateActor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateActor_Call) RunAndReturn(run func(Actor) (*Actor, error)) *MockRepository_CreateActor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCredit provides a mock function with given fields: credit
func (_m *MockRepository) CreateCredit(credit CreditIn) (*CreditIn, error) {
	ret := _m.Called(credit)

	var r0 *CreditIn
	var r1 error
	if rf, ok := ret.Get(0).(func(CreditIn) (*CreditIn, error)); ok {
		return rf(credit)
	}
	if rf, ok := ret.Get(0).(func(CreditIn) *CreditIn); ok {
		r0 = rf(credit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreditIn)
		}
	}

	if rf, ok := ret.Get(1).(func(CreditIn) error); ok {
		r1 = rf(credit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateCredit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCredit'
type MockRepository_CreateCredit_Call struct {
	*mock.Call
}

// CreateCredit is a helper method to define mock.On call
//   - credit CreditIn
func (_e *MockRepository_Expecter) CreateCredit(credit interface{}) *MockRepository_CreateCredit_Call {
	return &MockRepository_CreateCredit_Call{Call: _e.mock.On("CreateCredit", credit)}
}

func (_c *MockRepository_CreateCredit_Call) Run(run func(credit CreditIn)) *MockRepository_CreateCredit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(CreditIn))
	})
	return _c
}

func (_c *MockRepository_CreateCredit_Call) Return(_a0 *CreditIn, _a1 error) *MockRepository_CreateCredit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateCredit_Call) RunAndReturn(run func(CreditIn) (*CreditIn, error)) *MockRepository_CreateCredit_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMovie provides a mock function with given fields: movie
func (_m *MockRepository) CreateMovie(movie Movie) (*Movie, error) {
	ret := _m.Called(movie)

	var r0 *Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(Movie) (*Movie, error)); ok {
		return rf(movie)
	}
	if rf, ok := ret.Get(0).(func(Movie) *Movie); ok {
		r0 = rf(movie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(Movie) error); ok {
		r1 = rf(movie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMovie'
type MockRepository_CreateMovie_Call struct {
	*mock.Call
}

// CreateMovie is a helper method to define mock.On call
//   - movie Movie
func (_e *MockRepository_Expecter) CreateMovie(movie interface{}) *MockRepository_CreateMovie_Call {
	return &MockRepository_CreateMovie_Call{Call: _e.mock.On("CreateMovie", movie)}
}

func (_c *MockRepository_CreateMovie_Call) Run(run func(movie Movie)) *MockRepository_CreateMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Movie))
	})
	return _c
}

func (_c *MockRepository_CreateMovie_Call) Return(_a0 *Movie, _a1 error) *MockRepository_CreateMovie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateMovie_Call) RunAndReturn(run func(Movie) (*Movie, error)) *MockRepository_CreateMovie_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteActor provides a mock function with given fields: id
func (_m *MockRepository) DeleteActor(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteActor'
type MockRepository_DeleteActor_Call struct {
	*mock.Call
}

// DeleteActor is a helper method to define mock.On call
//   - id int64
func (_e *MockRepository_Expecter) DeleteActor(id interface{}) *MockRepository_DeleteActor_Call {
	return &MockRepository_DeleteActor_Call{Call: _e.mock.On("DeleteActor", id)}
}

func (_c *MockRepository_DeleteActor_Call) Run(run func(id int64)) *MockRepository_DeleteActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockRepository_DeleteActor_Call) Return(_a0 error) *MockRepository_DeleteActor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteActor_Call) RunAndReturn(run func(int64) error) *MockRepository_DeleteActor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMovie provides a mock function with given fields: id
func (_m *MockRepository) DeleteMovie(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMovie'
type MockRepository_DeleteMovie_Call struct {
	*mock.Call
}

// DeleteMovie is a helper method to define mock.On call
//   - id int64
func (_e *MockRepository_Expecter) DeleteMovie(id interface{}) *MockRepository_DeleteMovie_Call {
	return &MockRepository_DeleteMovie_Call{Call: _e.mock.On("DeleteMovie", id)}
}

func (_c *MockRepository_DeleteMovie_Call) Run(run func(id int64)) *MockRepository_DeleteMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockRepository_DeleteMovie_Call) Return(_a0 error) *MockRepository_DeleteMovie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteMovie_Call) RunAndReturn(run func(int64) error) *MockRepository_DeleteMovie_Call {
	_c.Call.Return(run)
	return _c
}

// GetGraph provides a mock function with given fields: length, nodes
func (_m *MockRepository) GetGraph(length int, nodes ...int) ([]dbtype.Path, error) {
	_va := make([]interface{}, len(nodes))
	for _i := range nodes {
		_va[_i] = nodes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, length)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []dbtype.Path
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...int) ([]dbtype.Path, error)); ok {
		return rf(length, nodes...)
	}
	if rf, ok := ret.Get(0).(func(int, ...int) []dbtype.Path); ok {
		r0 = rf(length, nodes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbtype.Path)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...int) error); ok {
		r1 = rf(length, nodes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGraph'
type MockRepository_GetGraph_Call struct {
	*mock.Call
}

// GetGraph is a helper method to define mock.On call
//   - length int
//   - nodes ...int
func (_e *MockRepository_Expecter) GetGraph(length interface{}, nodes ...interface{}) *MockRepository_GetGraph_Call {
	return &MockRepository_GetGraph_Call{Call: _e.mock.On("GetGraph",
		append([]interface{}{length}, nodes...)...)}
}

func (_c *MockRepository_GetGraph_Call) Run(run func(length int, nodes ...int)) *MockRepository_GetGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *MockRepository_GetGraph_Call) Return(_a0 []dbtype.Path, _a1 error) *MockRepository_GetGraph_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetGraph_Call) RunAndReturn(run func(int, ...int) ([]dbtype.Path, error)) *MockRepository_GetGraph_Call {
	_c.Call.Return(run)
	return _c
}

// LatestActor provides a mock function with given fields:
func (_m *MockRepository) LatestActor() (*Actor, error) {
	ret := _m.Called()

	var r0 *Actor
	var r1 error
	if rf, ok := ret.Get(0).(func() (*Actor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *Actor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Actor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_LatestActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestActor'
type MockRepository_LatestActor_Call struct {
	*mock.Call
}

// LatestActor is a helper method to define mock.On call
func (_e *MockRepository_Expecter) LatestActor() *MockRepository_LatestActor_Call {
	return &MockRepository_LatestActor_Call{Call: _e.mock.On("LatestActor")}
}

func (_c *MockRepository_LatestActor_Call) Run(run func()) *MockRepository_LatestActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_LatestActor_Call) Return(_a0 *Actor, _a1 error) *MockRepository_LatestActor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_LatestActor_Call) RunAndReturn(run func() (*Actor, error)) *MockRepository_LatestActor_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with given fields:
func (_m *MockRepository) Migrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type MockRepository_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
func (_e *MockRepository_Expecter) Migrate() *MockRepository_Migrate_Call {
	return &MockRepository_Migrate_Call{Call: _e.mock.On("Migrate")}
}

func (_c *MockRepository_Migrate_Call) Run(run func()) *MockRepository_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_Migrate_Call) Return(_a0 error) *MockRepository_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Migrate_Call) RunAndReturn(run func() error) *MockRepository_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// RandomActor provides a mock function with given fields:
func (_m *MockRepository) RandomActor() (*Actor, error) {
	ret := _m.Called()

	var r0 *Actor
	var r1 error
	if rf, ok := ret.Get(0).(func() (*Actor, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *Actor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Actor)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_RandomActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomActor'
type MockRepository_RandomActor_Call struct {
	*mock.Call
}

// RandomActor is a helper method to define mock.On call
func (_e *MockRepository_Expecter) RandomActor() *MockRepository_RandomActor_Call {
	return &MockRepository_RandomActor_Call{Call: _e.mock.On("RandomActor")}
}

func (_c *MockRepository_RandomActor_Call) Run(run func()) *MockRepository_RandomActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_RandomActor_Call) Return(_a0 *Actor, _a1 error) *MockRepository_RandomActor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_RandomActor_Call) RunAndReturn(run func() (*Actor, error)) *MockRepository_RandomActor_Call {
	_c.Call.Return(run)
	return _c
}

// RandomActorNotId provides a mock function with given fields: _a0
func (_m *MockRepository) RandomActorNotId(_a0 int) (*Actor, error) {
	ret := _m.Called(_a0)

	var r0 *Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*Actor, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *Actor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_RandomActorNotId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomActorNotId'
type MockRepository_RandomActorNotId_Call struct {
	*mock.Call
}

// RandomActorNotId is a helper method to define mock.On call
//   - _a0 int
func (_e *MockRepository_Expecter) RandomActorNotId(_a0 interface{}) *MockRepository_RandomActorNotId_Call {
	return &MockRepository_RandomActorNotId_Call{Call: _e.mock.On("RandomActorNotId", _a0)}
}

func (_c *MockRepository_RandomActorNotId_Call) Run(run func(_a0 int)) *MockRepository_RandomActorNotId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_RandomActorNotId_Call) Return(_a0 *Actor, _a1 error) *MockRepository_RandomActorNotId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_RandomActorNotId_Call) RunAndReturn(run func(int) (*Actor, error)) *MockRepository_RandomActorNotId_Call {
	_c.Call.Return(run)
	return _c
}

// SearchActorName provides a mock function with given fields: name
func (_m *MockRepository) SearchActorName(name string) (*Actor, error) {
	ret := _m.Called(name)

	var r0 *Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Actor, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *Actor); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_SearchActorName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchActorName'
type MockRepository_SearchActorName_Call struct {
	*mock.Call
}

// SearchActorName is a helper method to define mock.On call
//   - name string
func (_e *MockRepository_Expecter) SearchActorName(name interface{}) *MockRepository_SearchActorName_Call {
	return &MockRepository_SearchActorName_Call{Call: _e.mock.On("SearchActorName", name)}
}

func (_c *MockRepository_SearchActorName_Call) Run(run func(name string)) *MockRepository_SearchActorName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_SearchActorName_Call) Return(_a0 *Actor, _a1 error) *MockRepository_SearchActorName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_SearchActorName_Call) RunAndReturn(run func(string) (*Actor, error)) *MockRepository_SearchActorName_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: c
func (_m *MockRepository) Verify(c Chain) (bool, error) {
	ret := _m.Called(c)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(Chain) (bool, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(Chain) bool); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(Chain) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockRepository_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - c Chain
func (_e *MockRepository_Expecter) Verify(c interface{}) *MockRepository_Verify_Call {
	return &MockRepository_Verify_Call{Call: _e.mock.On("Verify", c)}
}

func (_c *MockRepository_Verify_Call) Run(run func(c Chain)) *MockRepository_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Chain))
	})
	return _c
}

func (_c *MockRepository_Verify_Call) Return(_a0 bool, _a1 error) *MockRepository_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Verify_Call) RunAndReturn(run func(Chain) (bool, error)) *MockRepository_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyWithEdges provides a mock function with given fields: c
func (_m *MockRepository) VerifyWithEdges(c Chain) ([]*Edge, error) {
	ret := _m.Called(c)

	var r0 []*Edge
	var r1 error
	if rf, ok := ret.Get(0).(func(Chain) ([]*Edge, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(Chain) []*Edge); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Edge)
		}
	}

	if rf, ok := ret.Get(1).(func(Chain) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_VerifyWithEdges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyWithEdges'
type MockRepository_VerifyWithEdges_Call struct {
	*mock.Call
}

// VerifyWithEdges is a helper method to define mock.On call
//   - c Chain
func (_e *MockRepository_Expecter) VerifyWithEdges(c interface{}) *MockRepository_VerifyWithEdges_Call {
	return &MockRepository_VerifyWithEdges_Call{Call: _e.mock.On("VerifyWithEdges", c)}
}

func (_c *MockRepository_VerifyWithEdges_Call) Run(run func(c Chain)) *MockRepository_VerifyWithEdges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Chain))
	})
	return _c
}

func (_c *MockRepository_VerifyWithEdges_Call) Return(_a0 []*Edge, _a1 error) *MockRepository_VerifyWithEdges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_VerifyWithEdges_Call) RunAndReturn(run func(Chain) ([]*Edge, error)) *MockRepository_VerifyWithEdges_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
